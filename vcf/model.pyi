from abc import ABCMeta
from typing import Any, Optional

allele_delimiter: Any

class _Call:
    site: Any = ...
    sample: Any = ...
    data: Any = ...
    gt_alleles: Any = ...
    ploidity: Any = ...
    called: Any = ...
    gt_nums: Any = ...
    def __init__(self, site: Any, sample: Any, data: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def gt_phase_char(self): ...
    @property
    def gt_bases(self): ...
    @property
    def gt_type(self): ...
    @property
    def phased(self): ...
    def __getitem__(self, key: Any): ...
    @property
    def is_variant(self): ...
    @property
    def is_het(self): ...

class _Record:
    CHROM: Any = ...
    POS: Any = ...
    ID: Any = ...
    REF: Any = ...
    ALT: Any = ...
    QUAL: Any = ...
    FILTER: Any = ...
    INFO: Any = ...
    FORMAT: Any = ...
    start: Any = ...
    end: Any = ...
    alleles: Any = ...
    samples: Any = ...
    affected_start: Any = ...
    affected_end: Any = ...
    def __init__(self, CHROM: Any, POS: Any, ID: Any, REF: Any, ALT: Any, QUAL: Any, FILTER: Any, INFO: Any, FORMAT: Any, sample_indexes: Any, samples: Optional[Any] = ...) -> None: ...
    def __cmp__(self, other: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __lt__(self, other: Any) -> Any: ...
    def __iter__(self) -> Any: ...
    def add_format(self, fmt: Any) -> None: ...
    def add_filter(self, flt: Any) -> None: ...
    def add_info(self, info: Any, value: bool = ...) -> None: ...
    def genotype(self, name: Any): ...
    @property
    def num_called(self): ...
    @property
    def call_rate(self): ...
    @property
    def num_hom_ref(self): ...
    @property
    def num_hom_alt(self): ...
    @property
    def num_het(self): ...
    @property
    def num_unknown(self): ...
    @property
    def aaf(self): ...
    @property
    def nucl_diversity(self): ...
    @property
    def heterozygosity(self): ...
    def get_hom_refs(self): ...
    def get_hom_alts(self): ...
    def get_hets(self): ...
    def get_unknowns(self): ...
    @property
    def is_snp(self): ...
    @property
    def is_indel(self): ...
    @property
    def is_sv(self): ...
    @property
    def is_transition(self): ...
    @property
    def is_deletion(self): ...
    @property
    def var_type(self): ...
    @property
    def var_subtype(self): ...
    @property
    def sv_end(self): ...
    @property
    def is_sv_precise(self): ...
    @property
    def is_monomorphic(self): ...

class _AltRecord(metaclass=ABCMeta):
    type: Any = ...
    def __init__(self, type: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...

class _Substitution(_AltRecord):
    sequence: Any = ...
    def __init__(self, nucleotides: Any, **kwargs: Any) -> None: ...
    def __len__(self): ...
    def __eq__(self, other: Any) -> Any: ...

class _Breakend(_AltRecord):
    chr: Any = ...
    pos: Any = ...
    remoteOrientation: Any = ...
    withinMainAssembly: Any = ...
    orientation: Any = ...
    connectingSequence: Any = ...
    def __init__(self, chr: Any, pos: Any, orientation: Any, remoteOrientation: Any, connectingSequence: Any, withinMainAssembly: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...

class _SingleBreakend(_Breakend):
    def __init__(self, orientation: Any, connectingSequence: Any, **kwargs: Any) -> None: ...

class _SV(_AltRecord):
    def __init__(self, type: Any, **kwargs: Any) -> None: ...

def make_calldata_tuple(fields: Any): ...
