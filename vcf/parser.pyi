from .model import make_calldata_tuple as make_calldata_tuple
from collections import namedtuple
from typing import Any, Optional

RESERVED_INFO: Any
RESERVED_FORMAT: Any
SINGULAR_METADATA: Any
field_counts: Any

_Info = namedtuple('Info', ['id', 'num', 'type', 'desc', 'source', 'version'])

_Filter = namedtuple('Filter', ['id', 'desc'])

_Alt = namedtuple('Alt', ['id', 'desc'])

_Format = namedtuple('Format', ['id', 'num', 'type', 'desc'])

_SampleInfo = namedtuple('SampleInfo', ['samples', 'gt_bases', 'gt_types', 'gt_phases'])

_Contig = namedtuple('Contig', ['id', 'length'])

class _vcf_metadata_parser:
    info_pattern: Any = ...
    filter_pattern: Any = ...
    alt_pattern: Any = ...
    format_pattern: Any = ...
    contig_pattern: Any = ...
    meta_pattern: Any = ...
    def __init__(self) -> None: ...
    def vcf_field_count(self, num_str: Any): ...
    def read_info(self, info_string: Any): ...
    def read_filter(self, filter_string: Any): ...
    def read_alt(self, alt_string: Any): ...
    def read_format(self, format_string: Any): ...
    def read_contig(self, contig_string: Any): ...
    def read_meta_hash(self, meta_string: Any): ...
    def read_meta(self, meta_string: Any): ...

class Reader:
    filename: Any = ...
    reader: Any = ...
    metadata: Any = ...
    infos: Any = ...
    filters: Any = ...
    alts: Any = ...
    formats: Any = ...
    contigs: Any = ...
    samples: Any = ...
    encoding: Any = ...
    def __init__(self, fsock: Optional[Any] = ..., filename: Optional[Any] = ..., compressed: Optional[Any] = ..., prepend_chr: bool = ..., strict_whitespace: bool = ..., encoding: str = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __next__(self): ...
    def fetch(self, chrom: Any, start: Optional[Any] = ..., end: Optional[Any] = ...): ...

class Writer:
    counts: Any = ...
    writer: Any = ...
    template: Any = ...
    stream: Any = ...
    info_order: Any = ...
    def __init__(self, stream: Any, template: Any, lineterminator: str = ...): ...
    def write_record(self, record: Any) -> None: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...
VCFReader = Reader
VCFWriter = Writer
